const int N = 2e5 + 5;
int segTree[4*N], lz[4*N];

void build(int nd, int l, int r) {
    lz[nd] = 0;
    segTree[nd] = 0;
    if (l == r) return;
    int mid = (l+r)/2;
    build(2*nd+1, l, mid);
    build(2*nd+2, mid+1, r);
}
void update(int nd, int l, int r, int lu, int ru, int val) {
    if (lz[nd] != 0) {
        segTree[nd] = lz[nd];
        if (l != r) {
        	lz[2*nd+1] = lz[nd];
        	lz[2*nd+2] = lz[nd];
        }
        lz[nd] = 0;
    }
    if (l > ru or r < lu) return;
    if (lu <= l && r <= ru) {
        segTree[nd] = val;
        if (l != r) {
            lz[2*nd+1] = val;
            lz[2*nd+2] = val;
        }
        return;
    }
    int mid = (l+r)>>1;
    update(2*nd+1, l, mid, lu, ru, val);
    update(2*nd+2, mid+1, r, lu, ru, val);
}
int get(int nd, int l, int r, int idx) {
    if (lz[nd] != 0) {
        segTree[nd] = lz[nd];
        if (l != r) {
        	lz[2*nd+1] = lz[nd];
        	lz[2*nd+2] = lz[nd];
        }
        lz[nd] = 0;
    }
    if (l == r) return segTree[nd];
    int mid = (l+r)>>1;
    if (l <= idx && idx <= mid) return get(2*nd+1, l, mid, idx);
    return get(2*nd+2, mid+1, r, idx);
}
